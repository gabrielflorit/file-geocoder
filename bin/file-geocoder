#!/usr/bin/env node

var fs = require('fs');
var optimist = require('optimist');
var NeDB = require('nedb');
var d3 = require('d3');
var _ = require('lodash');
var async = require('async');
var geocoder = require('geocoder');
var sleep = require('sleep');
var util = require('util');
var numeral = require('numeral');

var argv = optimist
	.usage('Geocodes a file (JSON or CSV). Requires a Google-style geocoder.\nUsage: $0')
	.options('f', {
		demand: false,
		alias: 'file',
		describe: 'JSON or CSV file to be geocoded'
	})
	.options('a', {
		demand: true,
		alias: 'fields',
		describe: 'comma-separated list of address fields, in order'
	})
	.options('d', {
		demand: false,
		alias: 'database',
		describe: 'database containing records. If specified, will ignore file option',
		'default': null
	})
	.options('h', {
		demand: false,
		alias: 'host',
		describe: 'geocoder host',
		'default': 'localhost'
	})
	.options('p', {
		demand: false,
		alias: 'port',
		describe: 'geocoder port',
		'default': 8080
	})
	.options('s', {
		demand: false,
		alias: 'throttle',
		describe: 'time (in seconds) to throttle the geocoding requests',
		'default': 0
	})
	.argv;

if (!argv.file && !argv.database) {
	console.log("You need to specify either 'file' or 'database'.");
	process.exit(0);
}

var fileType;
var count;
var db;
if (argv.database) {

	// connect to db
	db = new NeDB({
		filename: argv.database,
		autoload: true // automatic loading
	});

} else {

	var json;

	// parse file
	var file = fs.readFileSync(argv.file, 'utf8');

	try {
		// try parsing as json
		json = JSON.parse(file);
		fileType = 'json';
	} catch (e) {
		// try parsing as csv
		json = d3.csvParse(file);
		fileType = 'csv';
	}

	// connect to db
	db = new NeDB({
		filename: argv.file.split('.')[0] + '.db',
		autoload: true // automatic loading
	});

	// clear db
	db.remove({}, { multi: true});

	util.print('Importing ' + numeral(json.length).format('0,0') + ' records into ' + db.filename + '...');

	// insert all records
	async.each(json,
		function (doc, callback) {
			db.insert(doc, function (err, newDoc) {
				callback(err);
			});
		},
		function (err) {
			if (!err) {
				util.print(' done.\n');
			} else {
				console.log('\n\nERROR during record insertion: ' + err);
			}
		});

}

var summary = [];
var counter = 0;

// get all the records with no geocode status
db.find({GeocodeStatus: {$exists: false}}, function (err, docs) {

	// tell pace how many elements we're going to process
	var pace = require('pace')({
		total: docs.length,
		itemType: 'records'
	});

	// iterate over each record
	async.each(docs,
		function (doc, callback) {

			var address;

			try {
				// try creating the address
				address = argv.fields.split(',').map(function (value) {
					return _.find(doc, function(v, i) {
						return i.toLowerCase() == value.toLowerCase();
					}).trim();
				}).join(', ');
			} catch (e) {
				console.log('\n\nERROR during address creation for document: ' + JSON.stringify(doc, null, 4));
				throw e;
			}

			// geocode
			geocoder.geocode(address, function (err, data) {

				if (err) {
					console.log(err);
					callback(err);

				} else {

					var status = data.status;
					var updates = {};
					var locality = '';
					var administrative_area_level_1 = '';
					var country = '';

					try {

						if (status !== 'ZERO_RESULTS') {

							var results = data.results[0];

							status = results.geometry.location_type;
							var coords = results.geometry.location;
							updates = {GeocodeLat: coords.lat, GeocodeLng: coords.lng};

							debugger;

							// find the locality
							locality = _(results.address_components)
								.filter(function (v,w) {
									return _.includes(v.types, 'locality');
								}).chain()
								.first(1)
								.property('long_name')
								.value()[0];

							// find the administrative_area_level_1
							administrative_area_level_1 = _(results.address_components)
								.filter(function (v,w) {
									return _.includes(v.types, 'administrative_area_level_1');
								}).chain()
								.first(1)
								.property('long_name')
								.value()[0];

							// find the country
							country = _(results.address_components)
								.filter(function (v,w) {
									return _.includes(v.types, 'country');
								}).chain()
								.first(1)
								.property('long_name')
								.value()[0];
						}
					} catch (e) {
						console.log(JSON.stringify(data, null, 4));
						throw e;
					}

					summary.push(status);
					updates.GeocodeStatus = status;
					updates.GeocodeLocality = locality;
					updates.GeocodeAdminAreaLevel1 = administrative_area_level_1;
					updates.GeocodeCountry = country;
					updates.GeocodeAddress = address;

					db.update({_id: doc._id}, {$set: updates}, function (err, inserted) {

						counter++;

						pace.op(counter);
						sleep.sleep(argv.throttle);

						// call async with callback
						callback(err);

					});

				}
	
			}, {}, argv.host, argv.port);

		},
		function (err) {

			console.log("Summary:");
			console.log(JSON.stringify(_.countBy(summary, function (v) { return v; }), null, 2));

			// export records
			db.find({}, function (err, docs) {

				// no need for _id on output
				docs.forEach(function (doc) {
					delete doc._id;
				});

				var outputFilename = db.filename.split('.')[0];

				if (fileType === 'csv') {
					var output = d3.csvFormat(docs);
					util.print('\nWriting to ' + outputFilename + '-geocoded.csv...');
					fs.writeFileSync(outputFilename + '-geocoded.csv', output);
					util.print(' done.\n');
				} else {
					util.print('\nWriting to ' + outputFilename + '-geocoded.json...');
					fs.writeFileSync(outputFilename + '-geocoded.json', JSON.stringify(docs, null, 4));
					util.print(' done.\n');
				}

			});

		});

});
